//=========================================
//
// comment     : MapleStory Utility
// param       : None
// return      : None
// 
// Display Dpl : 1366x768 [only]
//
// Copy Right (C) 2018 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2018/04/28
//=========================================

CALL ../Log/logWriter.uws;
CALL ../Common/Messages.uws;
CALL ../Common/CommonKeySetting.uws;
CALL ../MapleManagement/MapleManagement.uws;

public PIC_PATH             = "../picture/";
public SCREEN_SHOT_SAVE_DIR = "../picture/ScreenShot/";
public MAPLE_STORY_EXE_DIR  = "C:\Nexon\MapleStory\MapleStory.exe";
public MAPLE_RESULT_OK      = 0;
public MAPLE_RESULT_OK_BOOL = true;

CLASS lib
//==========================================
// comment : ファミリアの気力が500以下であれば回復
// param   : None
// return  : 0 
//==========================================

function checkFamiliarPower()
    
    KBD(comKey.FAM_BOOK_KEY,0,300);
    SLEEP(0.5);
    ifb chkimg("../picture/fam500以下.bmp",0,0,0,1368,800);
        KBD(comKey.FAM_RECOVERY_KEY,0,300);
        logger.logWriter(LogLevel.LOG_INFO,Messages.RECOVERY_FAMILIAR_POWER);
    endif
    KBD(comKey.FAM_BOOK_KEY,0,300);

    result = MAPLE_RESULT_OK;
fend

//==========================================
// comment : メイプレージを使用する
// param   : None
// return  : 0 
//==========================================
function useMaprage()

    KBD(comKey.MAPRAGE_KEY,0,500)
    //TODO:5回以上使用したときの窓を閉じる処理
    result = MAPLE_RESULT_OK;
fend


//=========================================
// comment : テレポート職業限定　往復狩
// param   : None
// return  : 0 
//=========================================
//                                  攻撃キー         移動キー     黄点x起点    黄点y起点   黄点x終点   黄点y終点
function roundTripTeleportAttack( execKBD_Attack, execKBD_Move, yellowX_S, yellowY_S, yellowX_E, yellowY_E, );

    KBD(execKBD_Move,1,500);
    
    while true;
        KBD(execKBD_Attack,0,200);
        KBD(execKBD_Attack,0,200);
        KBD(VK_SPACE,0,200);
        KBD(VK_SPACE,0,200);
        if chkimg("../picture/黄点.bmp",0,yellowX_S,yellowY_S,yellowX_E,yellowY_E) then break;
    wend;

    KBD(execKBD_Move,2,500);

    result = MAPLE_RESULT_OK;
fend

//=========================================
//
// comment : 異常の確認
// param   : None
// return  : 0
//
//=========================================
function urgentCheck()

    //if  chkimg("../picture/エリボス.bmp",0,0,0,2000,2000) then SOUND(" ");
    if  chkimg("../picture/緑点.bmp",0,0,0,1368,800) then exitexit;
    ifb chkimg("../picture/突発.bmp",0,0,0,1368,800);
        for i = 1 to 3
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
        next
    endif
    if chkimg("../picture/talkEnd.bmp",0,0,0,1368,800) then BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);

    result = MAPLE_RESULT_OK; 
fend

//=========================================
//
// comment : メイプルをアクティブウィンドウにする
//           DisplayDpl : 可変対応           
//           2018/04/18 Ver3.68 対策済
// param   : None
// return  : 0
//
//=========================================
function activeWindow()

    
    mapleWindowID = GETID("MapleStory","MapleStoryClass");
    manager.WindowSize_X_MAX = ST_CLWIDTH;
    manager.WindowSize_Y_MAX = ST_CLHEIGHT;
    x = STATUS(mapleWindowID,ST_CLWIDTH) + 50;
    y = STATUS(mapleWindowID,ST_CLHEIGHT) + 50;
    //ウィンドウが左上(1,1)にあるなら移動させない
    ifb STATUS(mapleWindowID,ST_X) <> 1 AND STATUS(mapleWindowID,ST_Y) <> 1
	    ACW(mapleWindowID,1,1);
	    for i = 1 to 2
		    BTN(LEFT,CLICK,x,y,500); 
		    BTN(LEFT,CLICK,200,405,500);
		    BTN(LEFT,CLICK,200,405,200);
	    next
	else
		BTN(LEFT,CLICK,200,405,500);
	endif
    result = MAPLE_RESULT_OK;

fend

//=========================================
//
// comment : 赤点チェック and 石化チェック
//           1366x800           
// param   : None
// return  : void
//
//=========================================

procedure urgentCheckAndRock()
    while true
        ifb chkimg("../picture/石化.bmp",0,0,0,1368,800)
            for x = 1 TO 20
                KBD(VK_LEFT,0,100)
                KBD(VK_RIGHT,0,100)
            next
        endif

        if chkimg("../picture/赤点.bmp",0,0,0,1368,800) then alartSound();
    wend
fend

//=========================================
//
// comment : 黄点チェックで左右移動
//           1366x800       
// param   : None
// return  : 0
//
//=========================================


function checkYelloPoint()
    ifb chkimg(picPathHelper("黄点"),0,0,0,60,160)
        KBD(VK_RIGHT,1,500)
        KBD(VK_RIGHT,2,800)
        exit
    endif

    ifb chkimg(picPathHelper("黄点"),0,90,130,130,160)
        KBD(VK_LEFT,1,500)
        KBD(VK_LEFT,2,800)
        exit
    endif   
    
    result = MAPLE_RESULT_OK; 
fend

//======================================================================================
// comment : ゲームマスターからの返答要求確認
//           1366x800       
// param   : None
// return  : MAPLE_RESULT_OK : 0
// 備考    : 次の順に判定を行う
//           1.チャット欄に「ご返答」が存在するか
//　         2.ハート拡声器ではないか
//           3.MiniMapに赤点があるか
//           上記条件が全て当てはまった場合返答処理を行う
//======================================================================================
function checkGameMaster()
    ifb chkimg(picPathHelper("replyRequest"),1,0,400,150,780); //「ご返答」がチャット欄にあるか
        logger.logWriter(LogLevel.LOG_WARN,Messages.REPLY_REQUEST);
        ifb !chkimg(picPathHelper("heart"),0,0,0,150,780);   //ハート拡声器ではないか
            ifb chkimg(picPathHelper("赤点"),0,0,0,400,400);   //ミニMAPに赤点が存在するか
                logger.logWriter(LogLevel.LOG_WARN,Messages.ENCOUNT_GAME_MASTER);
                responseToGameMaster(getResponse()); //返答処理
                screenShot(); //スクリーンショット保存
                initChat(); //チャット欄初期化
            else //赤点がなかった時はチャット欄を初期化
                logger.logWriter(LogLevel.LOG_INFO,Messages.NOT_RED_POINT);
                initChat();
            endif
        else
            initChat(); //GMではない場合チャット欄初期化
            logger.logWriter(LogLevel.LOG_WARN,Messages.HEART_SPEAKER);
        endif
    endif

    //追加質問返答チェック
    //isNextResponse = false;
    //while !isNextResponse
        //logger.logWriter(LogLevel.LOG_WARN,Messages.WAIT_NEXT_RESPONSE);
    //    isNextResponse = waitNextQuestion();
    //wend

    result = MAPLE_RESULT_OK;
fend

//======================================================================================
// comment : ゲームマスターからの追加質問返答確認
// param   : None
// return  : MAPLE_RESULT_OK_BOOL : true
// 備考    : "引き続き、メイプルストーリーをお楽しみください"が表示されるまで質問に返答する。
//======================================================================================
function waitNextQuestion()
    isNextQuestion = true;
    while isNextQuestion
        ifb chkimg(lib.picPathHelper("nextQuestion"),1,0,400,150,780);
            //質問内容解析後、返答を行う。
            responseQuestion( checkQuestionAnalysis() );
        endif
        sleep(0.5);
        ifb chkimg(lib.picPathHelper("pleaseEnjoy"),1,0,400,150,780);
            isNextQuestion = false; // 引き続き、メイプルストーリーをお楽しみください。
        endif
        sleep(1);
    wend

    result = MAPLE_RESULT_OK_BOOL;
fend

//======================================================================================
// comment : どんな質問なのかを解析する
// param   : None
// return  : qustionNo : 質問No
// 備考    : TODO:質問のバリエーション
//======================================================================================
function checkQuestionAnalysis()
    questionNo = 0;
    //念のため5回ループして質問内容を確認
    for i = 1 to 5
       //if chkimg(lib.picPathHelper("nowPlayGameTitle"),1,0,400,150,780) then questionNo = 1;
        //質問内容が追加されたらここに追加。questionNoをインクリメントしてください。
    next
    result = questionNo;
fend

//======================================================================================
// comment : 質問に合わせて返答内容を変えて返答する
// param   : 質問No
// return  : MAPLE_RESULT_OK : 0
// 備考    : responseToGameMasterメソッドを呼び出して返答する。
//           メッセージ内容はメッセージクラスのanswer配列から取得する。
//======================================================================================
function responseQuestion(questionNo)
    select questionNo
        // 現在プレイされているゲームのタイトルをカタカナでお答えください。 に返答
        case 1
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.PLAY_GAME_TITLE] );
        default
            //TODO
    selend 
    result = MAPLE_RESULT_OK;
fend 

//======================================================================================
// comment : ゲームマスターからの返答要求に使用
//           する文字列をランダムで取得
//           1366x800       
// param   : None
// return  : responseStr : 返却文字列
//======================================================================================
function getResponse()
    //返答用の文字列初期化
    responseStr = ResponseMessages.RESPONSE_STR;
    //ランダムで返答用の文字列を取得
    num = random(length(ResponseMessages.resMessages) - 1); // ArraySize - 1
    responseStr = ResponseMessages.resMessages[num];
    //応答文字列返却
    result = responseStr;
fend


//=========================================
// comment : ゲームマスターからの返答要求に返答
//           1366x800       
// param   : 応答文字列
// return  : 0
//=========================================
function responseToGameMaster(responseStr)

    logger.logWriter(LogLevel.LOG_WARN,Messages.RESPONSE_MESSAGE);
    KBD(VK_1,0,1000);
    SendStr(0,responseStr,1,True);
    KBD(VK_CTRL,1,1500);
    KBD(VK_V,0,1500);
    KBD(VK_CTRL,2,1000);
    KBD(VK_ENTER,0,1000);
    BTN(LEFT,CLICK,400,350,600);
    BTN(LEFT,CLICK,400,350,600);
    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : ♡拡声器が見えたらチャットを初期化する
//           1366x800       
// param   : None
// return  : 0
//=========================================
function initChat()

    logger.logWriter(LogLevel.LOG_INFO,Messages.INIT_CHAT);
    CHAT_INIT_CMD = "/?";

    KBD(VK_1,0,1000)
    SendStr(0,CHAT_INIT_CMD,1,True)
    KBD(VK_CTRL,1,1500)
    KBD(VK_V,0,1500)
    KBD(VK_CTRL,2,1000)
    KBD(VK_ENTER,0,1000)
    BTN(LEFT,CLICK,400,350,600)
    BTN(LEFT,CLICK,400,350,600)
    result = MAPLE_RESULT_OK; 
fend

//=========================================
//
// comment : 石化チェック・赤点チェック・加護チェック
// param   : None
// return  : 0 
//
//=========================================
procedure parallelProgram()
    while TRUE
        ifb chkimg("../picture/石化.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();
        endif   
    wend
fend

//=========================================
// comment : 画像認識用パスヘルパー
// param   : ファイル名
// return  : 0 
// 備考    : ../picture/fileName.bmp を返却
//=========================================
function picPathHelper(fileName)
    result = PIC_PATH + fileName + ".bmp";
fend

//=========================================
// comment : メイプルが起動されていなければ終了
// param   : None
// return  : 0 
// 備考    : windowIDが -1 であれば起動されてない
//=========================================
function checkStartingMapleStory()
    windowID = GETID("MapleStory","MapleStoryClass")
    
    ifb windowID < 0;
        logger.logWriter(LogLevel.LOG_ERROR,Messages.STOP_MAPLE_MESSAGE);
        exitexit;
    endif
    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : 警告時のサウンド通知
// param   : None
// return  : 0 
//=========================================
function alartSound()
    for i = 1 to 20
        SOUND(" ");
        sleep(0.2);
    next
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : メモリ解放
// param   : None
// return  : 0 
//=========================================
function memoryRelease()
    memoryReleaseCommand = "empty.exe *"; 
    DOSCMD(memoryReleaseCommand);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : スクリーンショット保存
// param   : None
// return  : 0 
//=========================================
function screenShot()
    //現在日時を名前にして保存する
    SAVEIMG(SCREEN_SHOT_SAVE_DIR + getNowDateTime(),0);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 現在日時(ミリ秒まで)を取得する
// param   : None
// return  : YYYYMMDDHHNNSSZZ
//=========================================
function getNowDateTime()
    GETTIME();
    result = G_TIME_YY4 + G_TIME_MM2 + G_TIME_DD2 + _ //YYYYMMDD
             G_TIME_HH2 + G_TIME_NN2 + G_TIME_SS2 + _ //HHNNSS
             G_TIME_ZZ2;                              //ZZ
fend

//=========================================
// comment : メイプルストーリーを起動する
// param   : None
// return  : 0
//=========================================
function execMapleStory()
    DOSCMD(MAPLE_STORY_EXE_DIR,TRUE,FALSE)
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 指定時間待機する
// param   : None
// return  : 0
//=========================================
function wait(sleepTime)

    counter = 1;
    //待機秒ログ出力
    message = sleepTime + Messages.STOP_MAPLE_MESSAGE;
    logger.logWriter(LogLevel.LOG_INFO,message);
    //待機処理
    for i = 1 to sleepTime
        sleep(1)
        print counter + "秒待機しました";
        counter = counter + 1;
    next
    print sleepTime + "秒経過しました。待機を終了します。"
    counter = 1;
    result = 0;

fend

//=========================================
// comment : 職業別ログ出力先フォルダを取得する
// param   : None
// return  : 0
//=========================================
function getOutputDirectory()

    currentDirectory = GET_CUR_DIR
    outputDirectory = ""

    re=CreateOleObj("VBScript.RegExp")
    re.pattern = "([^\\]+?)?$" //正規表現パターン。1と5の間の文字を取り出す。
    re.Global = True //文字列全体を検索。trueでする(規定)、falseでしない(マッチしたらそこで終了)。
    re.IgnoreCase = True //大文字・小文字を区別。trueでしない(規定)、falseでする。
    match = re.Execute(currentDirectory)

    //マッチしたものをすべて出力
    for i = 0 To match.Count - 1
        outputDirectory = outputDirectory + match.Item(i).Value
    next

    result = outputDirectory;
fend

ENDCLASS


