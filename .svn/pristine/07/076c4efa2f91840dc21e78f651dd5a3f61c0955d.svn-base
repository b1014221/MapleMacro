//=========================================//
// Map Name    : アルカナ ケーヴロードの通路(上)   //
//=========================================//
// Mob Name    : 悲嘆の精霊
// Mob Level   : 239
// Mob HP      : 312,451,200
// Mob Exp     : 462,670
//=========================================//
// Mob Name    : 不調和の精霊
// Mob Level   : 240
// Mob HP      : 318,873,600
// Mob Exp     : 470,824
//=========================================//
// comment     : None
// param       : None
// return      : None
// ========================================//
// Display Dpl : 800x600 or 1366x768
//=========================================//
// Copy Right (C) 2018 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2018/04/01
//=========================================//

//=========================================
// init
//=========================================

//Parallel Program
thread parallelProgram();
//MapleAPI : LogWriter.uws , MapleLibrary.uws , UseSkillFiveJob.uws
CALL ../MapleAPI/MapleAPI.uws;
//import Luminous skillKeySetting
CALL KeySetting.uws;
//Move Window initSetting x = 1 , y = 1
lib.activeWindow();

//=========================================
//  Main Script Start
//=========================================
while true;

    //時刻の取得     : 3分経過していたらスキルをかかけなおす
    reUseSkillTime = GETTIME( 180 / 86400 );
    skill.luminous_useSkill();

    SLEEP(0.5);
    lib.checkFamiliarPower();
    
    while true
        goLeftAttack();
        goRightAttack();
        //3分経過していたらループを抜け出す
        if GETTIME() > reUseSkillTime then break;
    wend
wend

//=========================================
// Support Function
//=========================================


function goLeftAttack()

    _equlibrium = false;

    //イクリブリアムフラグの設定 1366x768対応
    IF CHKIMG("../picture/モード.bmp",0,0,0,1368,800)        THEN _equlibrium = true;
    IF CHKIMG("../picture/メモライズ_1366.bmp",0,0,0,1368,800) THEN _equlibrium = true;

    //ここから左へ行きながら攻撃する処理
    KBD(VK_LEFT,1,100);
    while true
        lib.urgentCheck();
        ifb chkimg("../picture/黄点.bmp",0,82,98,140,123);
            skill.luminous_skillCheck();
            ifb _equlibrium
                KBD(key.MEMORIZE_KEY,0,500);
                KBD(key.PSYCHOLOGY_DOOR_KEY,0,800);
                _equlibrium = false;
            endif
        endif

        KBD(key.REFLECTION_KEY,0,200);
        KBD(key.REFLECTION_KEY,0,200);
        KBD(key.TELEPORT_KEY,0,200);
        KBD(key.TELEPORT_KEY,0,200);

        if chkimg("../picture/黄点.bmp",0,30,100,65,115) THEN break;
    wend
    KBD(key.REFLECTION_KEY,0,200);
    KBD(key.REFLECTION_KEY,0,200);
    KBD(VK_LEFT,2,200);

    result = 0;

fend

function goRightAttack()

    _equlibrium = false;

    //イクリブリアムフラグの設定 1366x768対応
    IF CHKIMG("../picture/モード.bmp",0,0,0,1368,800)        THEN _equlibrium = true;
    IF CHKIMG("../picture/メモライズ_1366.bmp",0,0,0,1368,800) THEN _equlibrium = true;

    //ここから右へ行きながら攻撃する処理
    KBD(VK_RIGHT,1,100);
    while true
        lib.urgentCheck();
        ifb chkimg("../picture/黄点.bmp",0,82,98,140,123);
            skill.luminous_skillCheck();
            ifb _equlibrium
                KBD(key.MEMORIZE_KEY,0,500);
                KBD(key.PSYCHOLOGY_DOOR_KEY,0,800);
                _equlibrium = false;
            endif
        endif

        KBD(key.REFLECTION_KEY,0,200);
        KBD(key.REFLECTION_KEY,0,200);
        KBD(key.TELEPORT_KEY,0,200);
        KBD(key.TELEPORT_KEY,0,200);

        //下段にいた場合上へ戻る処理
        ifb chkimg("../picture/黄点.bmp",0,160,125,185,150)
            KBD(key.ROPE_CONNECT_KEY,0,1000);
            sleep(1);
        endif

        if chkimg("../picture/黄点.bmp",0,140,100,190,115) THEN break;
    wend
    KBD(key.REFLECTION_KEY,0,200);
    KBD(key.REFLECTION_KEY,0,200);
    KBD(VK_RIGHT,2,200);
    
    result = 0;

fend

//=========================================
//
// comment : 石化と他プレイヤー検知時Beep　並列処理
// param   : None
// return  : 0 
//
//=========================================
procedure parallelProgram()
    while TRUE
        ifb chkimg("../picture/石化.BMP",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.BMP",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.BMP",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            for beeps = 1 to 20
                SOUND(" ");
                sleep(0.2);
            next
        endif   
    wend
fend

